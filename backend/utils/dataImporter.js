// backend/utils/dataImporter.js
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const fs = require('fs');
const path = require('path');
const Product = require('../models/Product');
const User = require('../models/User');
const bcrypt = require('bcryptjs');

// ุชุญููู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
dotenv.config();

// ุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log('ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ููุชุญููู'))
  .catch(err => {
    console.error('ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:', err);
    process.exit(1);
  });

// ุงุณุชูุฑุงุฏ ุจูุงูุงุช ุงูููุชุฌุงุช
const importProducts = async () => {
  try {
    // ุงูุชุญูู ูู ูุฌูุฏ ูุณุชุฎุฏู ูุณุคูู
    let adminUser = await User.findOne({ role: 'admin' });
    
    // ุฅูุดุงุก ูุณุชุฎุฏู ูุณุคูู ุฅุฐุง ูู ููู ููุฌูุฏูุง
    if (!adminUser) {
      const passwordHash = await bcrypt.hash('admin123456', 10);
      adminUser = await User.create({
        username: 'ูุฏูุฑ ุงููุธุงู',
        email: 'admin@tarzi.com',
        password: passwordHash,
        role: 'admin',
        phone: '966500000000'
      });
      console.log('ุชู ุฅูุดุงุก ูุณุชุฎุฏู ูุณุคูู:');
      console.log({
        username: 'ูุฏูุฑ ุงููุธุงู',
        email: 'admin@tarzi.com',
        password: 'admin123456' // ููุชุทููุฑ ููุทุ ูุฌุจ ุชุบููุฑ ูุฐุง ููุฑูุง ูู ุงูุฅูุชุงุฌ
      });
    }
    
    // ูุฑุงุกุฉ ููู ุจูุงูุงุช ุงูููุชุฌุงุช
    const productsFilePath = path.join(__dirname, '../data/products.json');
    
    // ุงูุชุญูู ูู ูุฌูุฏ ููู ุงูููุชุฌุงุช
    if (!fs.existsSync(productsFilePath)) {
      console.error(`ููู ุงูููุชุฌุงุช ุบูุฑ ููุฌูุฏ: ${productsFilePath}`);
      return;
    }
    
    const productsData = JSON.parse(fs.readFileSync(productsFilePath, 'utf-8'));
    
    // ุฅุถุงูุฉ ูุนุฑู ุงููุณุคูู ููููุชุฌุงุช
    const productsWithAdmin = productsData.map(product => ({
      ...product,
      createdBy: adminUser._id
    }));
    
    // ุญุฐู ุงูููุชุฌุงุช ุงูููุฌูุฏุฉ (ุงุฎุชูุงุฑู)
    await Product.deleteMany();
    
    // ุฅุฏุฎุงู ุงูููุชุฌุงุช ุงูุฌุฏูุฏุฉ
    const result = await Product.insertMany(productsWithAdmin);
    
    console.log(`โ ุชู ุงุณุชูุฑุงุฏ ${result.length} ููุชุฌ ุจูุฌุงุญ`);
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงุณุชูุฑุงุฏ ุงูููุชุฌุงุช:', error);
  }
};

// ุชูููุฐ ุงูุงุณุชูุฑุงุฏ
importProducts()
  .then(() => {
    console.log('๐ ุงูุชูู ุงุณุชูุฑุงุฏ ุงูุจูุงูุงุช');
    process.exit(0);
  })
  .catch(err => {
    console.error('โ ูุดู ุงุณุชูุฑุงุฏ ุงูุจูุงูุงุช:', err);
    process.exit(1);
  });